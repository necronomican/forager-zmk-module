#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <135>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        combo_boot_l {
            timeout-ms = <50>;
            key-positions = <0 1 2>;
            bindings = <&bootloader>;
            require-prior-idle-ms = <3000>;
        };

        combo_boot_r {
            timeout-ms = <50>;
            key-positions = <7 8 9>;
            bindings = <&bootloader>;
            require-prior-idle-ms = <3000>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        };

        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            bindings = <
&kp Q         &kp W  &kp F  &kp P           &kp G             &kp J      &kp L      &kp U      &kp Y    &kp SEMI
&kp A         &kp R  &kp S  &kp T           &kp D             &kp H      &kp N      &kp E      &kp I    &kp O
&ht LSHIFT Z  &kp X  &kp C  &kp V           &kp B             &kp K      &kp M      &kp COMMA  &kp DOT  &ht LSHIFT RET
                            &mt LCTRL BSPC  &lt 1 LEFT_SHIFT  &kp SPACE  &lt 2 TAB
            >;
        };

        sym_layer {
            display-name = "Sym";
            bindings = <
&kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
&kp GRAVE   &sk LGUI    &sk LALT    &trans      &trans      &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp LS(SQT)
&trans      &trans      &trans      &trans      &kp PSCRN   &kp MINUS   &kp EQUAL   &kp BSLH    &trans      &kp LS(FSLH)
                                    &trans      &trans      &trans      &trans
            >;
        };

        nav_layer {
            display-name = "Num";
            bindings = <
&kp N1         &kp N2  &kp N3      &kp N4        &kp N5  &kp N6    &kp N7    &kp N8        &kp N9        &kp N0
&kp LS(GRAVE)  &trans  &trans      &trans        &trans  &kp LBKT  &kp LBKT  &kp RBKT      &kp RBKT      &kp SQT
&trans         &trans  &caps_word  &trans        &trans  &trans    &kp DEL   &kp C_BRI_DN  &kp C_BRI_UP  &kp FSLH
                                   &kp LC(BSPC)  &trans  &tog 1    &trans
            >;
        };

        func_layer {
            display-name = "Func";
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5       &kp F6       &kp F7           &kp F8  &kp F9  &kp F10
&kp F11  &kp F12  &none   &none   &none        &none        &none            &none   &none   &none
&none    &none    &none   &none   &bootloader  &bootloader  &kp LC(LA(DEL))  &none   &none   &none
                          &trans  &trans       &trans       &trans
            >;
        };
    };
};
